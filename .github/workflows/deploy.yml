name: CI and Deploy to Server

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  test_and_debug:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    ### Step 2: Test React Frontend ###
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install frontend dependencies
      working-directory: ./frontend  
      run: |
        npm install

    - name: Test React Build
      working-directory: ./frontend  
      run: |
        npm run build

    ### Step 3: Test Flask Backend ###
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install backend dependencies and run tests
      working-directory: ./backend  
      run: |
        python -m venv venv  
        . venv/bin/activate  
        pip install -r requirements.txt  
        pip install pytest pytest-cov  
        export PYTHONPATH=$PYTHONPATH:$(pwd)  
        pytest --cov=app tests/  

    - name: Check Flask Server Status
      working-directory: ./backend  
      run: |
        . venv/bin/activate  # Activate virtual environment
        python app.py &  # Start Flask app in the background
        sleep 10  # Wait for server to start
        status_code=$(curl -o /dev/null -s -w "%{http_code}\n" http://127.0.0.1:5000)
        if [ "$status_code" -eq 404 ] || [ "$status_code" -eq 200 ]; then
          echo "Flask server is running with expected behavior"
        else
          echo "Unexpected response: $status_code"
          exit 1
        fi

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test_and_debug
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy Backend
      run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} << 'EOF'
          cd /home/ubuntu/FileShare/backend
          git restore .  
          git reset --hard  
          git pull origin main
          source fshare/bin/activate
          pip install -r requirements.txt
          sudo systemctl restart flaskapp
          EOF

    - name: Deploy Frontend
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} << 'EOF'
        cd /home/ubuntu/FileShare/frontend
        git restore .  
        git reset --hard  
        git pull origin main
        npm install
        npm run build
        sudo systemctl restart nginx
        EOF
